import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { UserTypes } from "@utils/enums"
import { HYDRATE } from "next-redux-wrapper"
import type { AppState, AppThunk } from "../store1"

export interface User {
  role: keyof typeof UserTypes
  name?: string
  status?: string
  _id?: string
}

const initialState: User = {
  role: "admin",
}

export const USlice = createSlice({
  name: "User",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // [HYDRATE]: (state, action) => {
    //   console.log("HYDRATE", action.payload)
    //   return {
    //     ...state,
    //     ...action.payload.subject,
    //   }
    // },

    setUser: (state, action) => {
      return { ...state, ...action.payload }
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    // builder.addCase(HYDRATE, (state, action: any) => {
    //   console.log("HYDRATE", action.payload, state.value)
    //   return {
    //     ...state,
    //     ...action.payload.counter,
    //   }
    // })
    // [HYDRATE]: (state, action) => {
    //   console.log("HYDRATE", action.payload)
    //   return {
    //     ...state,
    //     ...action.payload.subject,
    //   }
    // },
    // builder
    //   .addCase(incrementAsync.pending, state => {
    //     state.status = "loading"
    //   })
    //   .addCase(incrementAsync.fulfilled, (state, action) => {
    //     state.status = "idle"
    //     state.value += action.payload
    //   })
  },
})

export const { setUser } = USlice.actions

export const UserSlice = USlice.reducer
